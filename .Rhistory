ggplot(Graph, aes(x = vote_solidity*10, y = prob_vote*100)) +
geom_line(stat = "smooth",
method = "gam",
aes(color = party,
group = party,
alpha = alpha,
linewidth = alpha),
show.legend = F) +
geom_vline(xintercept = 0, linewidth = 0.4) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
geom_text(data = segments %>% filter(vote_solidity!=8),
aes(x = vote_solidity-0.3,
y = gam + 2,
label = paste0(round(gam), "%")),
size = 3) +
ylab("Probability of\nvote intent (%)") +
xlab("RCI of leading party") +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
scale_alpha_continuous(range = c(0.35,1)) +
scale_color_manual(values = party_colors) +
scale_linewidth_continuous(range = c(1,1.5)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_prob_voteInt.png",
width = 8, height = 4.5)
ggplot(Graph, aes(x = vote_solidity*10, y = prob_vote*100)) +
geom_line(stat = "smooth",
method = "gam",
aes(color = party,
group = party,
alpha = alpha,
linewidth = alpha),
show.legend = F) +
geom_vline(xintercept = 0, linewidth = 0.4) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
geom_text(data = segments %>% filter(!(vote_solidity%in%c(-8,8,-5,-4))),
aes(x = vote_solidity-0.3,
y = gam + 2,
label = paste0(round(gam), "%")),
size = 3) +
ylab("Probability of\nvote intent (%)") +
xlab("RCI of leading party") +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
scale_alpha_continuous(range = c(0.35,1)) +
scale_color_manual(values = party_colors) +
scale_linewidth_continuous(range = c(1,1.5)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_prob_voteInt.png",
width = 8, height = 4.5)
ggplot(Graph, aes(x = vote_solidity*10, y = prob_vote*100)) +
geom_line(stat = "smooth",
method = "gam",
aes(color = party,
group = party,
alpha = alpha,
linewidth = alpha),
show.legend = F) +
geom_vline(xintercept = 0, linewidth = 0.4) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
geom_text(data = segments %>% filter(!(vote_solidity%in%c(-8,8,-5,-4))),
aes(x = vote_solidity-0.35,
y = gam + 2,
label = paste0(round(gam), "%")),
size = 3) +
ylab("Probability of\nvote intent (%)") +
xlab("RCI of leading party") +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
scale_alpha_continuous(range = c(0.35,1)) +
scale_color_manual(values = party_colors) +
scale_linewidth_continuous(range = c(1,1.5)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_prob_voteInt.png",
width = 8, height = 4.5)
# Packages ----------------------------------------------------------------
library(tidyverse)
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_aggregatedData.rds")
Data <- Data %>%
mutate(
# If fragility_index is > than 0.5, fragile will
# take a value of 1. If not, it will take a value of 0.
fragile = ifelse(fragility_index >= 0.5, 1, 0),
# Same thing with campaign volatility
volatile = ifelse(volatility >= 0.5, 1, 0))
## Quick cross-tabulation to explore the data
descr::crosstab(Data$volatile, Data$fragile)
crosstab <- descr::crosstab(Data$volatile, Data$fragile,
expected=T, #Add expected frequency to each cell
prop.chisq = T, #Total contribution of each cell
chisq = T) #Results of the chi-squared test will be printed
crosstab
## Save tab into a variable to use the number of rows and columns later
tab <- crosstab$tab
# degrees of freedom: (n_rows - 1)(n_cols - 1)
dfr <- (nrow(tab)-1)*(ncol(tab)-1) ## 1 degree of freedom
# Critical value of chi-square, p=.1, df=1
cv1 <- qchisq(.1, dfr, lower.tail=F)
cv1
cv05 <- qchisq(.05, dfr, lower.tail=F)
cv05
cv01 <- qchisq(.01, dfr, lower.tail=F)
cv01
chisq.test(Data$volatile, Data$fragile)
library(tidyverse)
install.packages("kableExtra")
Data <- readRDS("data/table3_aggregatedData.rds")
View(Data)
table1 <- Data %>%
top_n(volatility, 10)
table1 <- Data %>%
top_n(x = volatility, n = 10)
?top_n
table1 <- Data %>%
top_n(x = ., n = 10, wt = volatility)
View(table1)
table1 <- Data %>%
top_n(x = ., n = 10, wt = volatility) %>%
select(riding_name, volatility)
table1 <- Data %>%
top_n(x = ., n = 10, wt = volatility) %>%
select("Riding" = riding_name, "Campaign volatility"= volatility)
table1 %>%
kbl()
library(kableExtra)
table1 %>%
kableExtra::kbl()
table1 <- Data %>%
top_n(x = ., n = 10, wt = volatility) %>%
arrange(-volatility) %>%
select("Riding" = riding_name, "Campaign volatility"= volatility)
table1 <- Data %>%
top_n(x = ., n = 10, wt = volatility) %>%
arrange(-volatility) %>%
mutate(volatility = round(volatility, 2)) %>%
select("Riding" = riding_name, "Campaign volatility"= volatility)
table1 <- Data %>%
top_n(x = ., n = 15, wt = volatility) %>%
arrange(-volatility) %>%
mutate(volatility = round(volatility, 2)) %>%
select("Riding" = riding_name, "Campaign volatility"= volatility)
table1 %>%
kableExtra::kbl()
table1 %>%
kableExtra::kbl(format = "latex")
table1 %>%
kableExtra::kbl(format = "latex") %>%
kable_minimal()
table1 %>%
kableExtra::kbl(format = "latex",
col.names = c("Riding", "Campaign volatility"),
align = "r") %>%
kable_minimal()
table1 %>%
kableExtra::kbl(format = "latex",
col.names = c("Riding", "Campaign volatility"),
align = "r")
table1 %>%
kableExtra::kbl(format = "latex",
col.names = c("Riding", "Campaign volatility"),
align = "r",
caption = "Most volatile ridings\nduring the campaign")
table1 %>%
kableExtra::kbl(format = "latex",
col.names = c("Riding", "Campaign volatility"),
align = "r",
caption = "Most volatile ridings\\during the campaign")
table1 <- Data %>%
top_n(x = ., n = 15, wt = fragility_index) %>%
arrange(-fragility_index) %>%
mutate(fragility = round(fragility, 2)) %>%
select(riding_name, fragility)
table1 <- Data %>%
top_n(x = ., n = 15, wt = fragility_index) %>%
arrange(-fragility_index) %>%
mutate(fragility = round(fragility_index, 2)) %>%
select(riding_name, fragility)
table1 %>%
kableExtra::kbl(format = "latex",
col.names = c("Riding", "Vote fragility"),
align = "r",
caption = "Most fragile ridings before the campaign")
table1 <- Data %>%
top_n(x = ., n = 15, wt = fragility_index) %>%
arrange(-fragility_index) %>%
mutate(fragility = round(fragility_index, 2)) %>%
select(riding_name, fragility)
table1 %>%
kableExtra::kbl(format = "latex",
col.names = c("Riding", "Vote fragility"),
align = "r",
caption = "Most fragile ridings before the campaign")
table2 <- Data %>%
top_n(x = ., n = 15, wt = volatility) %>%
arrange(-volatility) %>%
mutate(volatility = round(volatility, 2)) %>%
select(riding_name, volatility)
table2 %>%
kableExtra::kbl(format = "latex",
col.names = c("Riding", "Campaign volatility"),
align = "r",
caption = "Most volatile ridings during the campaign")
library(tidyverse)
# Data --------------------------------------------------------------------
Data <- readRDS("data/table3_aggregatedData.rds")
View(Data)
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter() +
geom_smooth()
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter() +
geom_smooth() +
scale_x_continuous(limits = c(0.25,0.85))
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter() +
geom_smooth()
cor_fragility <- cor.test(Data$fragility_index, Data$fragility_index_mrp)$estimate
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(aes(color = volatility)) +
geom_smooth()
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(aes(color = volatility)) +
geom_smooth() +
scale_color_gradient(low = "grey", high = "black")
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(aes(color = volatility)) +
geom_smooth() +
scale_color_gradient(low = "white", high = "black")
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(aes(color = volatility)) +
geom_smooth() +
scale_color_gradient(low = "lightgrey", high = "black")
# Packages ----------------------------------------------------------------
library(tidyverse)
# Data --------------------------------------------------------------------
Data <- readRDS("data/table3_aggregatedData.rds")
cor_fragility <- cor.test(Data$fragility_index, Data$fragility_index_mrp)$estimate
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(aes(color = volatility)) +
geom_smooth() +
scale_color_gradient(low = "lightgrey", high = "black")
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter() +
geom_smooth()
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter() +
geom_smooth() +
envalysis::theme_publish()
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter() +
geom_smooth(color = "black") +
envalysis::theme_publish()
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(color = "darkgrey") +
geom_smooth(color = "black") +
envalysis::theme_publish()
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(color = "black") +
geom_smooth(color = "black") +
envalysis::theme_publish()
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(color = "darkgrey") +
geom_smooth(color = "black") +
envalysis::theme_publish()
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(color = "darkgrey") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
ylab("Fragility index with MRP") +
xlab("Fragility index without MRP")
graph1 <- ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(color = "darkgrey") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
ylab("Fragility index with MRP") +
xlab("Fragility index without MRP")
graph1 <- ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
ylab("Fragility index with MRP") +
xlab("Fragility index without MRP")
ggplot(Data, aes(x = fragility_index, y = fragility_index_mrp)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
ylab("Fragility index with MRP") +
xlab("Fragility index without MRP")
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Campaign volatility")
ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Campaign volatility")
gridExtra::grid.arrange(graph1, graph2)
graph1 <- ggplot(Data, aes(x = fragility_index_mrp, y = fragility_index)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Fragility index without MRP")
ggplot(Data, aes(x = fragility_index_mrp, y = fragility_index)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Fragility index without MRP")
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("") +
ylab("Campaign volatility")
ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("") +
ylab("Campaign volatility")
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("") +
ylab("Campaign volatility")
graph1 <- ggplot(Data, aes(x = fragility_index_mrp, y = fragility_index)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Fragility index without MRP")
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("") +
ylab("Campaign volatility")
gridExtra::grid.arrange(graph1, graph2)
graph1 <- ggplot(Data, aes(x = fragility_index_mrp, y = fragility_index)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("") +
ylab("Fragility index without MRP")
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Campaign volatility")
gridExtra::grid.arrange(graph1, graph2)
graph1 <- ggplot(Data, aes(x = fragility_index_mrp, y = fragility_index)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("") +
ylab("Fragility index\nwithout MRP")
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Campaign volatility")
gridExtra::grid.arrange(graph1, graph2)
?grid.arrange
gridExtra::grid.arrange(graph1, graph2, layout_matrix = "AB")
gridExtra::grid.arrange(graph1, graph2, ncol = 2)
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black",
method = "lm") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Campaign volatility")
gridExtra::grid.arrange(graph1, graph2, ncol = 2)
graph1 <- ggplot(Data, aes(x = fragility_index_mrp, y = fragility_index)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Fragility index\nwithout MRP")
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Campaign volatility")
gridExtra::grid.arrange(graph1, graph2, ncol = 2)
graph1 <- ggplot(Data, aes(x = fragility_index_mrp, y = fragility_index)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Fragility index\nwithout MRP") +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
axis.ticks = element_blank())
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F") +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Campaign volatility") +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
axis.ticks = element_blank())
gridExtra::grid.arrange(graph1, graph2, ncol = 2)
ggsave("graphs/appendix_mrp")
graph <- gridExtra::grid.arrange(graph1, graph2, ncol = 2)
ggsave(graph, "graphs/appendix_mrp")
ggsave(graph, "graphs/appendix_mrp.png",
width = 7, height = 6)
gridExtra::grid.arrange(graph1, graph2, ncol = 2)
ggsave("graphs/appendix_mrp.png",
width = 7, height = 6)
graph <- gridExtra::grid.arrange(graph1, graph2, ncol = 2)
ggsave(path = "graphs/appendix_mrp.png",
plot = graph,
width = 7, height = 6)
ggsave(filename = "graphs/appendix_mrp.png",
plot = graph,
width = 7, height = 6)
graph1 <- ggplot(Data, aes(x = fragility_index_mrp, y = fragility_index)) +
geom_jitter(color = "#36454F", alpha = 0.8) +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Fragility index\nwithout MRP") +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
axis.ticks = element_blank())
graph2 <- ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
geom_jitter(color = "#36454F", alpha = 0.8) +
geom_smooth(color = "black") +
envalysis::theme_publish() +
xlab("Fragility index with MRP") +
ylab("Campaign volatility") +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
axis.ticks = element_blank())
graph <- gridExtra::grid.arrange(graph1, graph2, ncol = 2)
ggsave(filename = "graphs/appendix_mrp.png",
plot = graph,
width = 7, height = 5)
ggsave(filename = "graphs/appendix_mrp.png",
plot = graph,
width = 7, height = 4.5)
# Packages and functions ----------------------------------------------------------------
library(tidyverse)
## survey data for model
Data <- readRDS("mrp/data/real_survey_data_with_riding_projections.rds")
model <- lm(vote_solidity ~
ageC * educ + income +
proj_CAQ*proj_PCQ*proj_QS*proj_PQ*proj_PLQ,
data=Data)
library(texreg)
install.packages("texreg")
library(texreg)
# Convertir le modèle en format LaTeX
texreg(model, file = "modele.tex", caption = "Modèle de régression linéaire")
# Afficher l'équation LaTeX
cat(texreg(model, output = "latex", single.row = TRUE))
install.packages("equatiomatic")
library(equatiomatic)
extract_eq(model)
summary(model)
