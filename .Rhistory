axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(lineheight = 0, size = 60)
)
ggsave("graphs/figure1_rciDistribution.png",
width = 8, height = 6.5)
ggplot(graph1, aes(x = irc, y = factor(month))) +
ggridges::geom_density_ridges(bandwidth = 0.75,
scale = 4.5,
color = "lightgrey",
aes(#fill = party,
alpha = survey_recency),
show.legend = F,
quantile_lines = T,
quantiles = c(0.5)) +
facet_wrap(~party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
#scale_color_manual(values = party_colors) +
#scale_fill_manual(values = party_colors) +
ylab("") +
xlab("\nRCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 25) +
#ggtitle("\nDistribution of the IRC across surveys from\nJanuary to August 2022 (n = 9135)") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(lineheight = 0, size = 30))
ggplot(GraphData, aes(x = rci, y = factor(clean_month))) +
geom_density_ridges(
# A larger bandwidth gives out a smoother density
bandwidth = 0.75,
# A larger scale means that the ridges will be more
# embedded together. A value of 1 means that the highest
# ridge will lightly touch the next ridge.
scale = 4.5,
color = "lightgrey",
# Alpha parameter varies according to the recency of the survey
aes(alpha = survey_recency),
show.legend = F,
# Show the median line in the densities
quantile_lines = T,
quantiles = c(0.5)
) +
# Create one facet by party
facet_wrap( ~ party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
ylab("") +
xlab("\nRCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 25) +
theme(
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(lineheight = 0, size = 30)
)
ggsave("graphs/figure1_rciDistribution.png",
width = 12, height = 9)
ggplot(GraphData, aes(x = rci, y = factor(clean_month))) +
geom_density_ridges(
# A larger bandwidth gives out a smoother density
bandwidth = 0.75,
# A larger scale means that the ridges will be more
# embedded together. A value of 1 means that the highest
# ridge will lightly touch the next ridge.
scale = 4.5,
color = "lightgrey",
# Alpha parameter varies according to the recency of the survey
aes(alpha = survey_recency),
show.legend = F,
# Show the median line in the densities
quantile_lines = T,
quantiles = c(0.5)
) +
# Create one facet by party
facet_wrap( ~ party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
ylab("") +
xlab("\nRCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 25) +
theme(
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(lineheight = 0.3, size = 30)
)
ggsave("graphs/figure1_rciDistribution.png",
width = 12, height = 9)
ggplot(GraphData, aes(x = rci, y = factor(clean_month))) +
geom_density_ridges(
# A larger bandwidth gives out a smoother density
bandwidth = 0.75,
# A larger scale means that the ridges will be more
# embedded together. A value of 1 means that the highest
# ridge will lightly touch the next ridge.
scale = 4.5,
color = "lightgrey",
# Alpha parameter varies according to the recency of the survey
aes(alpha = survey_recency),
show.legend = F,
# Show the median line in the densities
quantile_lines = T,
quantiles = c(0.5)
) +
# Create one facet by party
facet_wrap( ~ party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
ylab("") +
xlab("\nRCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 25) +
theme(
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(lineheight = 0.3, size = 30),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
)
ggsave("graphs/figure1_rciDistribution.png",
width = 12, height = 9)
ggplot(GraphData, aes(x = rci, y = factor(clean_month))) +
geom_density_ridges(
# A larger bandwidth gives out a smoother density
bandwidth = 0.75,
# A larger scale means that the ridges will be more
# embedded together. A value of 1 means that the highest
# ridge will lightly touch the next ridge.
scale = 4.5,
color = "lightgrey",
# Alpha parameter varies according to the recency of the survey
aes(alpha = survey_recency),
show.legend = F,
# Show the median line in the densities
quantile_lines = T,
quantiles = c(0.5)
) +
# Create one facet by party
facet_wrap( ~ party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
ylab("") +
xlab("\nRCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(lineheight = 0.3, size = 30),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
)
ggsave("graphs/figure1_rciDistribution.png",
width = 12, height = 9)
ggplot(GraphData, aes(x = rci, y = factor(clean_month))) +
geom_density_ridges(
# A larger bandwidth gives out a smoother density
bandwidth = 0.75,
# A larger scale means that the ridges will be more
# embedded together. A value of 1 means that the highest
# ridge will lightly touch the next ridge.
scale = 4.5,
color = "lightgrey",
# Alpha parameter varies according to the recency of the survey
aes(alpha = survey_recency),
show.legend = F,
# Show the median line in the densities
quantile_lines = T,
quantiles = c(0.5)
) +
# Create one facet by party
facet_wrap( ~ party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
ylab("") +
xlab("\nRCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 17.5) +
theme(
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 25),
axis.title.x = element_text(lineheight = 0.3, size = 30),
axis.line.y = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
)
ggsave("graphs/figure1_rciDistribution.png",
width = 12, height = 9)
ggplot(GraphData, aes(x = rci, y = factor(clean_month))) +
geom_density_ridges(
# A larger bandwidth gives out a smoother density
bandwidth = 0.75,
# A larger scale means that the ridges will be more
# embedded together. A value of 1 means that the highest
# ridge will lightly touch the next ridge.
scale = 4.5,
color = "lightgrey",
# Alpha parameter varies according to the recency of the survey
aes(alpha = survey_recency),
show.legend = F,
# Show the median line in the densities
quantile_lines = T,
quantiles = c(0.5)
) +
# Create one facet by party
facet_wrap( ~ party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
ylab("") +
xlab("\nRCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 20),
axis.title.x = element_text(lineheight = 0.3, size = 30),
axis.line.y = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
)
ggsave("graphs/figure1_rciDistribution.png",
width = 12, height = 9)
library(ggtext) ## for the element_markdown() function (in the graph)
ggplot(GraphData, aes(x = rci, y = factor(clean_month))) +
geom_density_ridges(
# A larger bandwidth gives out a smoother density
bandwidth = 0.75,
# A larger scale means that the ridges will be more
# embedded together. A value of 1 means that the highest
# ridge will lightly touch the next ridge.
scale = 4.5,
color = "lightgrey",
# Alpha parameter varies according to the recency of the survey
aes(alpha = survey_recency),
show.legend = F,
# Show the median line in the densities
quantile_lines = T,
quantiles = c(0.5)
) +
# Create one facet by party
facet_wrap( ~ party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
ylab("") +
xlab("\nRCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 20),
axis.title.x = element_markdown(lineheight = 0, size = 30),
axis.line.y = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
)
ggsave("graphs/figure1_rciDistribution.png",
width = 12, height = 9)
ggplot(GraphData, aes(x = rci, y = factor(clean_month))) +
geom_density_ridges(
# A larger bandwidth gives out a smoother density
bandwidth = 0.75,
# A larger scale means that the ridges will be more
# embedded together. A value of 1 means that the highest
# ridge will lightly touch the next ridge.
scale = 4.5,
color = "lightgrey",
# Alpha parameter varies according to the recency of the survey
aes(alpha = survey_recency),
show.legend = F,
# Show the median line in the densities
quantile_lines = T,
quantiles = c(0.5)
) +
# Create one facet by party
facet_wrap( ~ party) +
scale_alpha_continuous(range = c(0.25, 0.9)) +
ylab("") +
xlab("RCI") +
geom_vline(xintercept = 0) +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
strip.text.x = element_text(face = "plain"),
axis.text.y = element_text(size = 20),
axis.title.x = element_markdown(lineheight = 0, size = 30),
axis.line.y = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
)
ggsave("graphs/figure1_rciDistribution.png",
width = 12, height = 9)
## Loading data from the pre-campaign surveys
Pre <- readRS("data/table1_respondentsRCI.rds")
## Loading data from the pre-campaign surveys
Pre <- readRDS("data/table1_respondentsRCI.rds")
## Loading data from the pre-campaign surveys
Fragility <- readRDS("data/table1_respondentsRCI.rds")
## Loading data from during the campaign (via Qc125.com)
Volatility <- readRDS("data/table2_duringCampaign.rds")
ByRespondent <- Fragility %>%
# select relevant variables
select(respondent_id, month, starts_with("rci")) %>%
# put them in the long format
pivot_longer(
.,
# columns to put into long format
cols = starts_with("rci"),
# name of the new column containing the former variables names
names_to = "party",
# name of the new column containing the values
values_to = "rci",
# to remove the prefix rci_ from the variables names
names_prefix = "rci_"
)
View(ByRespondent)
ByRespondent <- Fragility %>%
# select relevant variables
select(respondent_id, month, starts_with("rci")) %>%
# put them in the long format
pivot_longer(
.,
# columns to put into long format
cols = starts_with("rci"),
# name of the new column containing the former variables names
names_to = "party",
# name of the new column containing the values
values_to = "rci",
# to remove the prefix rci_ from the variables names
names_prefix = "rci_"
) %>%
# grouping by respondent to only keep the maximum RCI by respondent
group_by(respondent_id) %>%
# filtering to only keep the maximum of the RCI column
filter(rci == max(rci)) %>%
# randomly keep one party by respondent when two or more parties are tied.
## The relevant information we need here is the RCI value, the party is not
## that important
sample_n(size = 1)
View(ByRespondent)
## 1. Keeping leading party of respondents ---------------------------------
ByRespondent <- Fragility %>%
# select relevant variables
select(respondent_id, month, riding_id, starts_with("rci")) %>%
# put them in the long format
pivot_longer(
.,
# columns to put into long format
cols = starts_with("rci"),
# name of the new column containing the former variables names
names_to = "party",
# name of the new column containing the values
values_to = "rci",
# to remove the prefix rci_ from the variables names
names_prefix = "rci_"
) %>%
# grouping by respondent to only keep the maximum RCI by respondent
group_by(respondent_id) %>%
# filtering to only keep the maximum of the RCI column
filter(rci == max(rci)) %>%
# randomly keep one party by respondent when two or more parties are tied.
## The relevant information we need here is the RCI value, the party is not
## that important
sample_n(size = 1)
View(ByRespondent)
# To put the maximum of a vector to 1 and the minimum at 0
minmaxNormalization <- function(x) {
return((x-min(x, na.rm = T))/(max(x, na.rm = T)-min(x, na.rm = T)))
}
source("functions.R")
sum(is.na(ByRespondent$riding_id))
## 1. Keeping leading party of respondents ---------------------------------
ByRespondent <- Fragility %>%
# select relevant variables
select(respondent_id, month, riding_id, starts_with("rci")) %>%
# put them in the long format
pivot_longer(
.,
# columns to put into long format
cols = starts_with("rci"),
# name of the new column containing the former variables names
names_to = "party",
# name of the new column containing the values
values_to = "rci",
# to remove the prefix rci_ from the variables names
names_prefix = "rci_"
) %>%
# grouping by respondent to only keep the maximum RCI by respondent
group_by(respondent_id) %>%
# filtering to only keep the maximum of the RCI column
filter(rci == max(rci)) %>%
# randomly keep one party by respondent when two or more parties are tied.
## The relevant information we need here is the RCI value, the party is not
## that important
sample_n(size = 1) %>%
# Drop respondents with missing riding information
drop_na(riding_id)
FragByRiding <- ByRespondent %>%
# Generate variable that is `1` if a respondent has a leading-party RCI below 3
mutate(below3 = ifelse(rci <= 0.3, 1, 0))
FragByRiding <- ByRespondent %>%
# Generate variable that is `1` if a respondent has a leading-party RCI below 3
mutate(below3 = ifelse(rci <= 0.3, 1, 0)) %>%
# Group by riding
group_by(riding_id) %>%
# Add a variable that contains the number of respondents by riding
mutate(n = n()) %>%
summarise(mean_irc = mean(irc),
n_below3 = sum(below3),
n_riding = unique(n))
FragByRiding <- ByRespondent %>%
# Generate variable that is `1` if a respondent has a leading-party RCI below 3
mutate(below3 = ifelse(rci <= 0.3, 1, 0)) %>%
# Group by riding
group_by(riding_id) %>%
# Add a variable that contains the number of respondents by riding
mutate(n = n()) %>%
summarise(mean_irc = mean(rci),
n_below3 = sum(below3),
n_riding = unique(n))
View(FragByRiding)
?scale
?scale
FragByRiding <- ByRespondent %>%
# Generate variable that is `1` if a respondent has a leading-party RCI below 3
mutate(below3 = ifelse(rci <= 0.3, 1, 0)) %>%
# Group by riding
group_by(riding_id) %>%
# Add a variable that contains the number of respondents by riding
mutate(n = n()) %>%
# Summarise data by the grouping variable (riding_id)
summarise(
# Get the mean of the leading-party RCIs
mean_rci = mean(rci),
# Get the number of respondents by riding with a leading-party RCI below 3
# by computing the sum of the below3 column
n_below3 = sum(below3),
# Get the number of respondents by riding
n_riding = unique(n)
) %>%
mutate(
# Reverse the RCI (since a lower RCI = more fragility)
mean_rci_rev = (mean_rci * -1),
# Compute the proportion of respondents in the riding with a RCI below 3
prop_below3 = n_below3 / n_riding,
# Scale the two indicators
prop_below3_scaled = scale(prop_below3,
center = T)[, 1],
mean_rci_scaled = scale(mean_rci_rev,
center = T)[, 1],
fragility_index = minmaxNormalization(prop_below3_scaled + mean_rci_scaled)
)
View(FragByRiding)
# Justification for scaling the indicators with the `scale()` function
hist(FragByRiding$prop_below3)
hist(FragByRiding$prop_below3_scaled)
# Justification for scaling the indicators with the `scale()` function
hist(FragByRiding$prop_below3)
hist(FragByRiding$prop_below3_scaled)
FragByRiding <- ByRespondent %>%
# Generate variable that is `1` if a respondent has a leading-party RCI below 3
mutate(below3 = ifelse(rci <= 0.3, 1, 0)) %>%
# Group by riding
group_by(riding_id) %>%
# Add a variable that contains the number of respondents by riding
mutate(n = n()) %>%
# Summarise data by the grouping variable (riding_id)
summarise(
# Get the mean of the leading-party RCIs
mean_rci = mean(rci),
# Get the number of respondents by riding with a leading-party RCI below 3
# by computing the sum of the below3 column
n_below3 = sum(below3),
# Get the number of respondents by riding
n_riding = unique(n)
) %>%
mutate(
# Reverse the RCI (since a lower RCI = more fragility)
mean_rci_rev = (mean_rci * -1),
# Compute the proportion of respondents in the riding with a RCI below 3
prop_below3 = n_below3 / n_riding,
# Scale the two indicators
prop_below3_scaled = scale(prop_below3,
center = T)[, 1],
mean_rci_scaled = scale(mean_rci_rev,
center = T)[, 1],
# Add both indicators together and using the custom function `minmaxNormalization()`
# to put it between 0 and 1
fragility_index = minmaxNormalization(prop_below3_scaled + mean_rci_scaled)
)
# Justification for scaling the indicators with the `scale()` function
hist(FragByRiding$prop_below3)
hist(FragByRiding$prop_below3_scaled)
# Justification for scaling the indicators with the `scale()` function
hist(FragByRiding$prop_below3)
hist(FragByRiding$prop_below3_scaled)
hist(FragByRiding$mean_rci_rev)
hist(FragByRiding$mean_rci_scaled)
hist(FragByRiding$mean_rci_rev)
hist(FragByRiding$mean_rci_scaled)
hist(FragByRiding$fragility_index)
