#guides(alpha = guide_legend(order = 1)) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey",
## control for alpha for number of respondents in riding
aes(alpha = n_riding)) +
scale_alpha_continuous(name = "Number of respondents", range = c(0.1,1)) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 25, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 25, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 25, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 25, color = "grey") +
#guides(alpha = guide_legend(order = 1)) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
##### Weights for age groups in quebec census 2022
qc_age_groups_weights <- c(4.9,
5.3,
5.4,
5.0,
5.6,
6.4,
6.6,
6.5,
6.9,
6.3,
6.1,
7.0,
7.3,
6.4,
5.3,
4.0,
2.5,
1.5,
0.8,
0.2,
0.0)/100
names(qc_age_groups_weights) <- seq(from = 0,
to = 100,
by = 5)
barplot(qc_age_groups_weights)
# Data --------------------------------------------------------------------
Data <- readRDS("data/table1_respondentsRCI.rds")
View(Data)
library(clessnverse)
table1_respondentsRCI <- readRDS("C:/Users/huber/Dropbox/CLESSN/article_riding-volatility/data/table1_respondentsRCI.rds")
View(table1_respondentsRCI)
library(tidyverse)
View(table1_respondentsRCI)
# Data --------------------------------------------------------------------
Data <- readRDS("data/table1_respondentsRCI.rds")
View(Data)
## Partial data without SES variables
Data <- readRDS("data/table1_respondentsRCI.rds") %>%
## Generate vote_fragility for each respondent
pivot_longer(.,
cols = starts_with("rci"),
names_to = "party",
values_to = "vote_fragility")
test <- readRDS("mrp/data/real_survey_data.rds")
test <- readRDS("mrp/data/real_survey_data.rds") %>%
group_by(respondent_id) %>%
sample_n(size = 1)
View(test)
saveRDS(test, "mrp/data/real_survey_data.rds")
test <- readRDS("mrp/data/real_survey_data.rds")
## Partial data without SES variables
Data <- readRDS("data/table1_respondentsRCI.rds") %>%
## Generate vote_fragility for each respondent
pivot_longer(.,
cols = starts_with("rci"),
names_to = "party",
values_to = "vote_fragility") %>%
group_by(respondent_id) %>%
filter(vote_fragility == max(vote_fragility))
View(Data)
## Partial data without SES variables
Data <- readRDS("data/table1_respondentsRCI.rds") %>%
## Generate vote_fragility for each respondent
pivot_longer(.,
cols = starts_with("rci"),
names_to = "party",
values_to = "vote_fragility") %>%
group_by(respondent_id) %>%
filter(vote_fragility == max(vote_fragility)) %>%
sample_n(size = 1)
## Partial data without SES variables
Data <- readRDS("data/table1_respondentsRCI.rds") %>%
## Generate vote_fragility for each respondent
pivot_longer(.,
cols = starts_with("rci"),
names_to = "party",
values_to = "vote_fragility") %>%
group_by(respondent_id) %>%
filter(vote_fragility == max(vote_fragility)) %>%
sample_n(size = 1) %>%
select(respondent_id,
month,
riding_name,
riding_id,
vote_fragility)
## Census data
Census <- readRDS("mrp/data/census_data.rds")
View(Census)
get_male_weight <- function(riding_id){
male_weight <- Census$male[Census$riding_id==riding_id]
return(male_weight)
}
get_male_weight(104)
get_male_weight(110)
get_male_weight <- function(riding_id){
male_weight <- Census[Census$riding_id==riding_id]$male
return(male_weight)
}
get_male_weight(110)
get_male_weight <- function(riding_id){
male_weight <- Census[Census$riding_id==riding_id,]$male
return(male_weight)
}
get_male_weight(110)
riding_id = 104
Census$male
Census$male[Census$riding_id==riding_id]
riding_id = 938
male_weight <- Census$male[Census$riding_id==riding_id]
Census$riding_id==riding_id
## Census data
Census <- readRDS("mrp/data/census_data.rds") %>%
## remove province line
filter(riding_name != "Province")
get_male_weight <- function(riding_id){
male_weight <- Census$male[Census$riding_id==riding_id]
return(male_weight)
}
get_male_weight(110)
get_male_weight(754) ##
get_male_weight(c(110, 754))
male_weights <- Census$male
get_male_weight <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_weight <- male_weights[as.character(Census$riding_id)]
return(male_weight)
}
get_male_weight(110) ## saint-francois
get_male_weight <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_weight <- male_weights[as.character(riding_id)]
return(male_weight)
}
get_male_weight(110) ## saint-francois
get_male_weight(754) ## chauveau
get_male_weight(c(110, 754))
get_male_weight(c(110, 110, 754))
sample(c("male","female"), 3, prob = get_male_weight(c(110, 110, 754)))
sample(c("male","female"), 3,
prob = get_male_weight(c(110, 110, 754)),
replace = T)
male_weights <- Census$male
names(male_weights) <- Census$riding_id
get_gender <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_prob <- male_weights[as.character(riding_id)]
female_prob <- 1-male_weight
gender <- sample(x = c("male", "female"),
size = 1,
replace = T,
prob = c(male_prob, female_prob))
return(gender)
}
get_gender(110)
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_prob <- male_weights[as.character(riding_id)]
female_prob <- 1-male_weight
get_gender <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_prob <- male_weights[as.character(riding_id)]
female_prob <- 1-male_prob
gender <- sample(x = c("male", "female"),
size = 1,
replace = T,
prob = c(male_prob, female_prob))
return(gender)
}
get_gender(110)
get_gender(110)
get_gender(c(110,110,110))
get_gender(110)
get_gender(110) ## saint-francois
get_gender(754) ## chauveau
real_survey_data <- readRDS("C:/Users/huber/Dropbox/CLESSN/article_riding-volatility/mrp/data/real_survey_data.rds")
View(real_survey_data)
get_male <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_prob <- male_weights[as.character(riding_id)]
female_prob <- 1-male_prob
gender <- sample(x = c(1, 0),
size = 1,
replace = T,
prob = c(male_prob, female_prob))
return(gender)
}
get_gender(110) ## saint-francois
get_male <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_prob <- male_weights[as.character(riding_id)]
female_prob <- 1-male_prob
gender <- sample(x = c(1, 0),
size = 1,
replace = T,
prob = c(male_prob, female_prob))
return(gender)
}
get_male(110) ## saint-francois
get_male(754) ## chauveau
get_male(110) ## saint-francois
get_male(754) ## chauveau
get_male(110) ## saint-francois
get_male(754) ## chauveau
## sapply by passing all values of Data$riding_id in the function
Data$male <- sapply(Data$riding_id, get_male)
sapply(c(110,110,110), get_male)
sum(is.na(Data$riding_id))
## Partial data without SES variables
Data <- readRDS("data/table1_respondentsRCI.rds") %>%
## Generate vote_fragility for each respondent
pivot_longer(.,
cols = starts_with("rci"),
names_to = "party",
values_to = "vote_fragility") %>%
group_by(respondent_id) %>%
filter(vote_fragility == max(vote_fragility)) %>%
sample_n(size = 1) %>%
drop_na(riding_id) %>%
select(respondent_id,
month,
riding_name,
riding_id,
vote_fragility)
get_male <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_prob <- male_weights[as.character(riding_id)]
female_prob <- 1-male_prob
gender <- sample(x = c(1, 0),
size = 1,
replace = T,
prob = c(male_prob, female_prob))
return(gender)
}
get_male(110) ## saint-francois
get_male(754) ## chauveau
## sapply by passing all values of Data$riding_id in the function
Data$male <- sapply(Data$riding_id, get_male)
#### Add region to Data
regions <- Census$region
names(regions) <- Census$riding_id
Data$region <- regions[as.character(Data$riding_id)]
Data <- readRDS("data/table1_respondentsRCI.rds") %>%
## Generate vote_fragility for each respondent
pivot_longer(.,
cols = starts_with("rci"),
names_to = "party",
values_to = "vote_fragility") %>%
group_by(respondent_id) %>%
filter(vote_fragility == max(vote_fragility)) %>%
sample_n(size = 1) %>%
drop_na(riding_id) %>%
select(respondent_id,
month,
riding_name,
riding_id,
vote_fragility)
## Census data
Census <- readRDS("mrp/data/census_data.rds") %>%
## remove province line
filter(riding_name != "Province")
#### Add region to Data
regions <- Census$region
names(regions) <- Census$riding_id
Data$region <- regions[as.character(Data$riding_id)]
get_male <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_prob <- male_weights[as.character(riding_id)]
female_prob <- 1-male_prob
gender <- sample(x = c(1, 0),
size = 1,
replace = T,
prob = c(male_prob, female_prob))
return(gender)
}
get_male(110) ## saint-francois
get_male(754) ## chauveau
## sapply by passing all values of Data$riding_id in the function
Data$male <- sapply(Data$riding_id, get_male)
View(Census)
unique(real_survey_data$ageC)
weights <- Census[Census$riding_id==riding_id,c("age15m29", "age30m44", "age45m59", "age60m74", "age75p")]
View(weights)
weights <- as.vector(Census[Census$riding_id==riding_id,c("age15m29", "age30m44", "age45m59", "age60m74", "age75p")])
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("age15m29", "age30m44", "age45m59", "age60m74", "age75p")]))
get_ageC <- function(riding_id){
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("age15m29", "age30m44", "age45m59", "age60m74", "age75p")]))
ageC <- sample(x = c("age15m29", "age30m44", "age45m59", "age60m74", "age75p"),
size = 1,
replace = T,
prob = weights)
return(ageC)
}
get_ageC(332)
get_ageC(332)
get_ageC(332)
get_ageC(332)
get_ageC(332)
get_ageC(332)
get_ageC(332)
Data$ageC <- sapply(Data$riding_id, get_ageC)
table(Data$ageC)
table(real_survey_data$ageC)
table(real_survey_data$lang)
20+44+35
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("french", "english", "otherLang")]))
weights2 <- c(weights[1], weights[2]+weights[3])
Data$ageC <- factor(sapply(Data$riding_id, get_ageC),
levels = c("age15m29", "age30m44", "age45m59",
"age60m74", "age75p"))
## lang ------------------------------------------------------------------
get_lang <- function(riding_id){
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("french", "english", "otherLang")]))
weights2 <- c(weights[1], weights[2]+weights[3])
lang <- sample(x = c("french", "english_other"),
size = 1,
replace = T,
prob = weights2)
return(lang)
}
get_lang(938)
get_lang(938)
get_lang(938)
get_lang(938)
get_lang(938)
get_lang(938)
get_lang(938)
get_lang(938)
get_lang(938)
get_lang(938)
Data$lang <- factor(sapply(Data$riding_id, get_lang))
unique(Data$lang)
## educ ------------------------------------------------------------------
get_educ <- function(riding_id){
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("educHSB", "educColl", "educUniv")]))
educ <- sample(x = c("educHSB", "educColl", "educUniv"),
size = 1,
replace = T,
prob = weights)
return(educ)
}
get_educ(838) ## rimouski
get_educ(838) ## rimouski
get_educ(838) ## rimouski
get_educ(838) ## rimouski
get_educ(838) ## rimouski
Data$educ <- factor(sapply(Data$riding_id, get_educ),
levels = c("educHSB", "educColl", "educUniv"))
View(Data)
## income ----------------------------------------------------------------
get_income <- function(riding_id){
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("income40m", "income40m99", "income100p")]))
income <- sample(x = c("incomeLow", "incomeMid", "incomeHigh"),
size = 1,
replace = T,
prob = weights)
return(income)
}
get_income(660) ## trois-rivieres
Data$income <- factor(sapply(Data$riding_id, get_income),
levels = c("incomeLow", "incomeMid", "incomeHigh"))
Data$region <- factor(regions[as.character(Data$riding_id)])
unique(Data$region)
Final <- Data %>%
select(respondent_id,
riding_id,
riding_name,
region,
male,
ageC,
lang,
educ,
income,
vote_fragility)
View(Final)
## set seed
set.seed(1234)
## male --------------------------------------------------------------------
get_male <- function(riding_id){
male_weights <- Census$male
names(male_weights) <- Census$riding_id
male_prob <- male_weights[as.character(riding_id)]
female_prob <- 1-male_prob
gender <- sample(x = c(1, 0),
size = 1,
replace = T,
prob = c(male_prob, female_prob))
return(gender)
}
get_male(110) ## saint-francois
get_male(754) ## chauveau
## sapply by passing all values of Data$riding_id in the function
Data$male <- sapply(Data$riding_id, get_male)
## ageC ------------------------------------------------------------------
get_ageC <- function(riding_id){
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("age15m29", "age30m44", "age45m59", "age60m74", "age75p")]))
ageC <- sample(x = c("age15m29", "age30m44", "age45m59", "age60m74", "age75p"),
size = 1,
replace = T,
prob = weights)
return(ageC)
}
get_ageC(332) ## westmount
Data$ageC <- factor(sapply(Data$riding_id, get_ageC),
levels = c("age15m29", "age30m44", "age45m59",
"age60m74", "age75p"))
## lang ------------------------------------------------------------------
get_lang <- function(riding_id){
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("french", "english", "otherLang")]))
weights2 <- c(weights[1], weights[2]+weights[3])
lang <- sample(x = c("french", "english_other"),
size = 1,
replace = T,
prob = weights2)
return(lang)
}
get_lang(938) ## ungava
Data$lang <- factor(sapply(Data$riding_id, get_lang))
## educ ------------------------------------------------------------------
get_educ <- function(riding_id){
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("educHSB", "educColl", "educUniv")]))
educ <- sample(x = c("educHSB", "educColl", "educUniv"),
size = 1,
replace = T,
prob = weights)
return(educ)
}
get_educ(838) ## rimouski
Data$educ <- factor(sapply(Data$riding_id, get_educ),
levels = c("educHSB", "educColl", "educUniv"))
## income ----------------------------------------------------------------
get_income <- function(riding_id){
weights <- as.vector(t(Census[Census$riding_id==riding_id,c("income40m", "income40m99", "income100p")]))
income <- sample(x = c("incomeLow", "incomeMid", "incomeHigh"),
size = 1,
replace = T,
prob = weights)
return(income)
}
get_income(660) ## trois-rivieres
Data$income <- factor(sapply(Data$riding_id, get_income),
levels = c("incomeLow", "incomeMid", "incomeHigh"))
# Organize it -------------------------------------------------------------
Final <- Data %>%
select(respondent_id,
riding_id,
riding_name,
region,
male,
ageC,
lang,
educ,
income,
vote_fragility)
saveRDS(Final, "mrp/data/simulated_survey_data.rds")
