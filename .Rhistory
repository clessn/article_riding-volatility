## generate variance of the pred column for each group
summarise(var_pred = var(pred)) %>%
## add all parties' results together for each riding
group_by(riding_id) %>%
summarise(volatility = sum(var_pred)) %>%
## data transformations
mutate(volatility_scale = scale(volatility,
center = T)[,1],
volatility_log = log(volatility),
volatility_log_scale = scale(volatility_log,
center = T)[,1],
volatility = minmaxNormalization(volatility_log_scale))
View(VolByRiding)
hist(VolByRiding$volatility)
Data <- Volatility %>%
group_by(riding_id) %>%
summarise(riding_name = unique(riding_name))
View(Data)
Data <- Volatility %>%
## get unique riding_name for each riding_id
group_by(riding_id) %>%
summarise(riding_name = unique(riding_name)) %>%
## join fragility index
left_join(x = ., y = FragByRiding, by = "riding_id")
View(Data)
Data <- Volatility %>%
## get unique riding_name for each riding_id
group_by(riding_id) %>%
summarise(riding_name = unique(riding_name)) %>%
## join fragility index
left_join(x = ., y = FragByRiding, by = "riding_id") %>%
## join campaign volatility
left_join(x = ., y = VolByRiding, by = "riding_id")
View(Data)
Data <- Volatility %>%
## get unique riding_name for each riding_id
group_by(riding_id) %>%
summarise(riding_name = unique(riding_name)) %>%
## join fragility index
left_join(x = ., y = FragByRiding, by = "riding_id") %>%
## join campaign volatility
left_join(x = ., y = VolByRiding, by = "riding_id") %>%
## select 4 crucial columns
select(riding_id, riding_name, fragility_index, volatility)
View(Data)
saveRDS(Data, "data/table3_agregatedData.rds")
View(Data)
# Packages ----------------------------------------------------------------
library(tidyverse) ## for data wrangling via dplyr
source("functions.R")
# Data --------------------------------------------------------------------
## Loading data from the pre-campaign surveys
Fragility <- readRDS("data/table1_respondentsRCI.rds")
## Loading data from during the campaign (via Qc125.com)
Volatility <- readRDS("data/table2_duringCampaign.rds") %>%
mutate(date = as.Date(date)) %>%
# Filter for campaign dates
filter(date >= "2022-08-28" &
date <= "2022-10-03" &
# removing PVQ and independant candidates
!(party %in% c("PVQ", "AUT")))
# Fragility index -------------------------------------------------------------------------
## 1. Keeping leading party of respondents ---------------------------------
ByRespondent <- Fragility %>%
# select relevant variables
select(respondent_id, month, riding_id, starts_with("rci")) %>%
# put them in the long format
pivot_longer(
.,
# columns to put into long format
cols = starts_with("rci"),
# name of the new column containing the former variables names
names_to = "party",
# name of the new column containing the values
values_to = "rci",
# to remove the prefix rci_ from the variables names
names_prefix = "rci_"
) %>%
# grouping by respondent to only keep the maximum RCI by respondent
group_by(respondent_id) %>%
# filtering to only keep the maximum of the RCI column
filter(rci == max(rci)) %>%
# randomly keep one party by respondent when two or more parties are tied.
## The relevant information we need here is the RCI value, the party is not
## that important
sample_n(size = 1) %>%
# Drop respondents with missing riding information
drop_na(riding_id)
## 2. Generate fragility index by riding ------------------------------
## Two indicators
##### indicator1: mean RCI of leading parties for respondents of a riding
##### indicator2: proportion of respondents of a riding with a leading-party RCI below the arbitrary threshold of 3
FragByRiding <- ByRespondent %>%
# Generate variable that is `1` if a respondent has a leading-party RCI below 3
mutate(below3 = ifelse(rci <= 0.3, 1, 0)) %>%
# Group by riding
group_by(riding_id) %>%
# Add a variable that contains the number of respondents by riding
mutate(n = n()) %>%
# Summarise data by the grouping variable (riding_id)
summarise(
# Get the mean of the leading-party RCIs
mean_rci = mean(rci),
# Get the number of respondents by riding with a leading-party RCI below 3
# by computing the sum of the below3 column
n_below3 = sum(below3),
# Get the number of respondents by riding
n_riding = unique(n)
) %>%
mutate(
# Reverse the RCI (since a lower RCI = more fragility)
mean_rci_rev = (mean_rci * -1),
# Compute the proportion of respondents in the riding with a RCI below 3
prop_below3 = n_below3 / n_riding,
# Scale the two indicators
prop_below3_scaled = scale(prop_below3,
center = T)[, 1],
mean_rci_scaled = scale(mean_rci_rev,
center = T)[, 1],
# Add both indicators together and using the custom function `minmaxNormalization()`
# to put it between 0 and 1
fragility_index = minmaxNormalization(prop_below3_scaled + mean_rci_scaled)
)
# Justification for scaling the indicators with the `scale()` function
hist(FragByRiding$prop_below3)
hist(FragByRiding$prop_below3_scaled)
hist(FragByRiding$mean_rci_rev)
hist(FragByRiding$mean_rci_scaled)
hist(FragByRiding$fragility_index)
# Campaign volatility -----------------------------------------
## We decided to measure riding volatility as the variance of the daily vote share
## predictions of each party
VolByRiding <- Volatility %>%
mutate(pred = pred*100) %>%
## group by riding and party
group_by(riding_id, party) %>%
## generate variance of the pred column for each group
summarise(var_pred = var(pred)) %>%
## add all parties' results together for each riding
group_by(riding_id) %>%
summarise(volatility = sum(var_pred)) %>%
## data transformations
mutate(volatility_scale = scale(volatility,
center = T)[,1],
volatility_log = log(volatility),
volatility_log_scale = scale(volatility_log,
center = T)[,1],
volatility = minmaxNormalization(volatility_log_scale))
hist(VolByRiding$volatility)
# Join fragility index and campaign volatility by riding  --------------
Data <- Volatility %>%
## get unique riding_name for each riding_id
group_by(riding_id) %>%
summarise(riding_name = unique(riding_name)) %>%
## join fragility index
left_join(x = ., y = FragByRiding, by = "riding_id") %>%
## join campaign volatility
left_join(x = ., y = VolByRiding, by = "riding_id") %>%
## select 4 crucial columns
select(riding_id, riding_name, fragility_index, volatility)
# Save it -----------------------------------------------------------------
saveRDS(Data, "data/table3_agregatedData.rds")
# Packages ----------------------------------------------------------------
library(tidyverse) ## for data wrangling and ggplot
library(ggridges) ## for embedding density ridges
library(envalysis) ## for the `theme_publish()` function
library(ggtext) ## for the element_markdown() function (in the graph)
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_agregatedData.rds")
View(Data)
names(Data)
str(Data)
ggplot(Data, aes(x = fragility_index))
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = fragility_index)) +
geom_histogram(alpha = 1,
binwidth = 0.025,
fill = "#B4B4B4") +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
#text = element_markdown(lineheight = 10),
axis.title.x = element_text(lineheight = 0),
axis.title.y = element_text(lineheight = 0)
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("No volatility predicted", "Volatility predicted")
) +
scale_y_continuous(breaks = seq(from = 0, to = 15, by = 5)) +
xlab("Volatility index (before campaign)") +
ylab("Number of ridings")
ggsave("graphs/figure2_fragilityIndexDistribution.png",
width = 7, height = 4.5)
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = fragility_index)) +
geom_histogram(alpha = 1,
binwidth = 0.025,
fill = "#B4B4B4") +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
axis.title.x = element_text(lineheight = 0),
axis.title.y = element_text(lineheight = 0),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("No volatility predicted", "Volatility predicted")
) +
scale_y_continuous(breaks = seq(from = 0, to = 15, by = 5)) +
xlab("Volatility index (before campaign)") +
ylab("Number of ridings")
ggsave("graphs/figure2_fragilityIndexDistribution.png",
width = 7, height = 4.5)
library(tidyverse) ## for data wrangling and ggplot
library(ggridges) ## for embedding density ridges
library(envalysis) ## for the `theme_publish()` function
library(ggtext) ## for the element_markdown() function (in the graph)
Data <- readRDS("data/table3_agregatedData.rds")
View(Data)
names(Data)
str(Data)
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_agregatedData.rds")
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = fragility_index)) +
geom_histogram(alpha = 1,
binwidth = 0.025,
fill = "#B4B4B4") +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
axis.title.x = element_text(lineheight = 0),
axis.title.y = element_text(lineheight = 0),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("No volatility predicted", "Volatility predicted")
) +
scale_y_continuous(breaks = seq(from = 0, to = 15, by = 5)) +
xlab("Vote fragility index (before campaign)") +
ylab("Number of ridings")
ggsave("graphs/figure2_fragilityIndexDistribution.png",
width = 7, height = 4.5)
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = fragility_index)) +
geom_histogram(alpha = 1,
binwidth = 0.025,
fill = "#B4B4B4") +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
axis.title.x = element_text(lineheight = 0),
axis.title.y = element_text(lineheight = 0),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("Not fragile", "Fragile")
) +
scale_y_continuous(breaks = seq(from = 0, to = 15, by = 5)) +
xlab("Vote fragility index (before campaign)") +
ylab("Number of ridings")
ggsave("graphs/figure2_fragilityIndexDistribution.png",
width = 7, height = 4.5)
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_agregatedData.rds")
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = volatility)) +
geom_histogram(fill = "#B4B4B4",
alpha = 1, binwidth = 0.025) +
theme_publish(base_size = 25) +
theme(axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")) +
scale_x_continuous(breaks = c(0.15, 0.85),
labels = c("No volatility observed", "Volatility observed")) +
xlab("Campaign volatility") +
ylab("Number of ridings")
ggsave("graphs/figure3_campaignVolatilityDistribution.png",
width = 7, height = 4.5)
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = volatility)) +
geom_histogram(fill = "#B4B4B4",
alpha = 1, binwidth = 0.025) +
theme_publish(base_size = 20) +
theme(axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")) +
scale_x_continuous(breaks = c(0.15, 0.85),
labels = c("No volatility observed", "Volatility observed")) +
xlab("Campaign volatility") +
ylab("Number of ridings")
ggsave("graphs/figure3_campaignVolatilityDistribution.png",
width = 7, height = 4.5)
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_agregatedData.rds")
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = fragility_index)) +
geom_histogram(alpha = 1,
binwidth = 0.025,
fill = "#B4B4B4") +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
axis.title.x = element_text(lineheight = 0),
axis.title.y = element_text(lineheight = 0),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("Not fragile", "Fragile")
) +
scale_y_continuous(breaks = seq(from = 0, to = 15, by = 5),
limits = c(0,15)) +
xlab("Vote fragility index (before campaign)") +
ylab("Number of ridings")
ggsave("graphs/figure2_fragilityIndexDistribution.png",
width = 7, height = 4.5)
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = fragility_index)) +
geom_histogram(alpha = 1,
binwidth = 0.025,
fill = "#B4B4B4") +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
axis.title.x = element_text(lineheight = 0),
axis.title.y = element_text(lineheight = 0),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("Not fragile", "Fragile")
) +
scale_y_continuous(breaks = seq(from = 0, to = 15, by = 5),
limits = c(0,20)) +
xlab("Vote fragility index (before campaign)") +
ylab("Number of ridings")
ggsave("graphs/figure2_fragilityIndexDistribution.png",
width = 7, height = 4.5)
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = fragility_index)) +
geom_histogram(alpha = 1,
binwidth = 0.025,
fill = "#B4B4B4") +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
axis.title.x = element_text(lineheight = 0),
axis.title.y = element_text(lineheight = 0),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("Not fragile", "Fragile")
) +
scale_y_continuous(breaks = seq(from = 0, to = 20, by = 5),
limits = c(0,20)) +
xlab("Vote fragility index (before campaign)") +
ylab("Number of ridings")
ggsave("graphs/figure2_fragilityIndexDistribution.png",
width = 7, height = 4.5)
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = volatility)) +
geom_histogram(fill = "#B4B4B4",
alpha = 1,
binwidth = 0.025) +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("No volatility observed", "Volatility observed")
) +
scale_y_continuous(breaks = seq(from = 0, to = 20, by = 5),
limits = c(0,20)) +
xlab("Campaign volatility") +
ylab("Number of ridings")
ggsave(
"graphs/figure3_campaignVolatilityDistribution.png",
width = 7,
height = 4.5
)
jo <- c(12,
4,
7,
36,
21,
11,
33,
18,
15,
18,
13,
27,
33,
13,
18,
6,
10)
hub <- (32,
31,
20,
11,
24,
4,
4,
12,
18,
24,
10,
12,
17,
18,
44,
10,
5)
hub <- c(32,
31,
20,
11,
24,
4,
4,
12,
18,
24,
10,
12,
17,
18,
44,
10,
5)
library(ggplot2)
library(dplyr)
d <- data.frame(name = c(rep("jo", 16), rep("hub", 16)),
score = c(jo, hub))
d <- data.frame(name = c(rep("jo", 17), rep("hub", 17)),
score = c(jo, hub))
View(d)
d <- data.frame(name = c(rep("jo", 17), rep("hub", 17)),
score = c(jo, hub)) %>%
group_by(name) %>%
mutate(score_all = cumsum(score))
View(d)
d <- data.frame(name = c(rep("jo", 17), rep("hub", 17)),
score = c(jo, hub)) %>%
group_by(name) %>%
mutate(score_all = cumsum(score))
ggplot(d, aes(x = 1:17, y = score_all))
c(1:17)
ggplot(d, aes(x = c(1:17), y = score_all))
d <- data.frame(tour = c(1:17, 1:17),
name = c(rep("jo", 17), rep("hub", 17)),
score = c(jo, hub)) %>%
group_by(name) %>%
mutate(score_all = cumsum(score))
ggplot(d, aes(x = tour, y = score_all))
ggplot(d, aes(x = tour, y = score_all)) +
geom_line()
ggplot(d, aes(x = tour, y = score_all)) +
geom_line(aes(group = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_line(aes(group = name, color = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, color = name)) +
geom_line(aes(group = name, color = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, color = name, fill = name),
position = position_dodge()) +
geom_line(aes(group = name, color = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, y = score,
color = name, fill = name),
position = position_dodge()) +
geom_line(aes(group = name, color = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, y = score,
color = name, fill = name),
position = position_dodge()) +
geom_line(aes(group = name, color = name),
size = 2)
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, y = score,
color = name, fill = name),
position = position_dodge(),
alpha = 0.7) +
geom_line(aes(group = name, color = name),
size = 2, alpha = 0.8)
