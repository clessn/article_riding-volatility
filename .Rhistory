axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_other_thresholds.png",
width = 7, height = 7)
ggplot(GraphData2, aes(x = fragility_index, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
facet_wrap(~threshold) +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 15, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 15, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 15, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 15, color = "grey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 1),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
#geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
#          color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_other_thresholds.png",
width = 7, height = 7)
ggplot(GraphData2, aes(x = fragility_index, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
facet_wrap(~threshold) +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 15, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 15, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 15, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 15, color = "grey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 0.75),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
#geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
#          color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_other_thresholds.png",
width = 7, height = 7)
ggplot(GraphData2, aes(x = fragility_index, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
facet_wrap(~threshold) +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 10, color = "lightgrey") +
geom_text(x = 1, y = 1, label = "Q2", size = 10, color = "lightgrey") +
geom_text(x = 0, y = 0, label = "Q3", size = 10, color = "lightgrey") +
geom_text(x = 1, y = 0, label = "Q4", size = 10, color = "lightgrey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 0.75),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
#geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
#          color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_other_thresholds.png",
width = 7, height = 7)
graph1 <- ggplot(GraphData2, aes(x = fragility_index, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
facet_wrap(~threshold) +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 10, color = "lightgrey") +
geom_text(x = 1, y = 1, label = "Q2", size = 10, color = "lightgrey") +
geom_text(x = 0, y = 0, label = "Q3", size = 10, color = "lightgrey") +
geom_text(x = 1, y = 0, label = "Q4", size = 10, color = "lightgrey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 0.75),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
#geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
#          color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
for (i in c(0.1, 0.2, 0.3, 0.4, 0.5)){
FragByRiding <- ByRespondent %>%
# Generate variable that is `1` if a respondent has a leading-party RCI below threshold
mutate(below_threshold = ifelse(rci <= i, 1, 0)) %>%
# Group by riding
group_by(riding_id) %>%
# Add a variable that contains the number of respondents by riding
mutate(n = n()) %>%
# Summarise data by the grouping variable (riding_id)
summarise(
# Get the mean of the leading-party RCIs
mean_rci = mean(rci),
# Get the number of respondents by riding with a leading-party RCI below threshold
# by computing the sum of the below_threshold column
n_below_threshold = sum(below_threshold),
# Get the number of respondents by riding
n_riding = unique(n)
) %>%
mutate(
# Reverse the RCI (since a lower RCI = more fragility)
mean_rci_rev = (mean_rci * -1),
# Compute the proportion of respondents in the riding with a RCI below 3
prop_below_threshold = n_below_threshold / n_riding,
# Scale the two indicators
prop_below_threshold_scaled = scale(prop_below_threshold,
center = T)[, 1],
mean_rci_scaled = scale(mean_rci_rev,
center = T)[, 1],
# Add both indicators together and use the clessnverse::normalize_min_max
# to put it between 0 and 1
fragility_index = clessnverse::normalize_min_max(prop_below_threshold_scaled + mean_rci_scaled),
# add threshold column for the graph
threshold = i*10
)
if (i == 0.1){
GraphData <- FragByRiding
} else {
GraphData <- rbind(GraphData, FragByRiding)
}
}
GraphData2 <- GraphData %>%
left_join(., Data, by = "riding_id") %>%
select(riding_id, volatility, fragility_index,
threshold, n_riding)
## For visualisation purposes, transform the `n_riding` variable, which will
## be our `alpha` parameter
GraphData2$alpha <- log(scale(GraphData2$n_riding, center = F)[,1]+0.000000001)
## Create a loess model for the alpha scale breaks
loess_alpha <- loess(alpha ~ n_riding,
data = GraphData2)
GraphData2 %>%
# remove observations with threshold of 3
filter(threshold != 3) %>%
# rename thresholds
mutate(threshold = paste0("RCI threshold at ", threshold)) %>%
ggplot(aes(x = fragility_index, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
facet_wrap(~threshold) +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 10, color = "lightgrey") +
geom_text(x = 1, y = 1, label = "Q2", size = 10, color = "lightgrey") +
geom_text(x = 0, y = 0, label = "Q3", size = 10, color = "lightgrey") +
geom_text(x = 1, y = 0, label = "Q4", size = 10, color = "lightgrey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 0.75),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
#geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
#          color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
graph2 <-
ggsave("graphs/appendix_other_thresholds.png",
width = 7, height = 7)
graph2 <- GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index))
graph2 <- GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate)
View(graph2)
graph2 <- GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(GraphData2, aes(x = threshold, y = cor))
graph2 <- GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor))
GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor))
graph2 <- GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line()
GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line()
?geom_line
GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line() +
theme_publish()
GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line() +
geom_point(size = 2) +
theme_publish()
GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line() +
geom_point(size = 1) +
theme_publish()
GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line() +
geom_point(size = 1) +
theme_publish() +
ylab("<br>Pearson correlation test between<br>fragility index and campaign volatility") +
xlab("<br>RCI threshold<br>")
GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line() +
geom_point(size = 1) +
theme_publish() +
ylab("<br>Pearson correlation test between<br>fragility index and campaign volatility") +
xlab("<br>RCI threshold<br>") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
graph2 <- GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line() +
geom_point(size = 1) +
theme_publish() +
ylab("<br>Pearson correlation test between<br>fragility index and campaign volatility") +
xlab("<br>RCI threshold<br>") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
graph <- gridExtra::grid.arrange(graph1, graph2, ncol = 2)
ggsave("graphs/appendix_other_thresholds.png",
plot = graph,
width = 7, height = 7)
ggsave("graphs/appendix_other_thresholds.png",
plot = graph,
width = 12, height = 7)
graph1 <- GraphData2 %>%
# remove observations with threshold of 3
filter(threshold != 3) %>%
# rename thresholds
mutate(threshold = paste0("RCI threshold at ", threshold)) %>%
ggplot(aes(x = fragility_index, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
facet_wrap(~threshold) +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 10, color = "lightgrey") +
geom_text(x = 1, y = 1, label = "Q2", size = 10, color = "lightgrey") +
geom_text(x = 0, y = 0, label = "Q3", size = 10, color = "lightgrey") +
geom_text(x = 1, y = 0, label = "Q4", size = 10, color = "lightgrey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 0.75),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
#geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
#          color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
graph2 <- GraphData2 %>%
group_by(threshold) %>%
summarise(cor = cor.test(volatility, fragility_index)$estimate) %>%
ggplot(aes(x = threshold, y = cor)) +
geom_line() +
geom_point(size = 1) +
theme_publish() +
ylab("<br>Pearson correlation test between<br>fragility index and campaign volatility") +
xlab("<br>RCI threshold<br>") +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
graph <- gridExtra::grid.arrange(graph1, graph2, ncol = 2)
ggsave("graphs/appendix_other_thresholds.png",
plot = graph,
width = 12, height = 7)
View(Data)
library(dplyr)
library(tidyverse)
url <- "https://www.dgeq.org/doc/gen2018-10-01/resultats.json"
json <- jsonlite::fromJSON(url)
df <- json$circonscriptions
partys <- c("CAQ", "PLQ", "PQ", "QS", "PCQ")
names(partys) <- c(27, 6, 8, 40, 31)
for (i in 1:125){
dfi <- as.data.frame(df[[14]][i]) %>%
select(party_id = numeroPartiPolitique,
prop_vote = tauxVote) %>%
mutate(prop_vote = prop_vote/100,
riding_id = df$numeroCirconscription[i])
if (i == 1){
data <- dfi
} else {
data <- rbind(data, dfi)
}
}
final <- data %>%
mutate(party = partys[as.character(party_id)]) %>%
drop_na(party) %>%
pivot_wider(names_from = "party",
values_from = "prop_vote",
id_cols = "riding_id",
values_fill = 0)
View(final)
census_data <- readRDS("C:/Users/huber/Dropbox/CLESSN/article_riding-volatility/mrp/data/census_data.rds")
View(census_data)
final <- data %>%
mutate(party = partys[as.character(party_id)]) %>%
drop_na(party) %>%
pivot_wider(names_from = "party",
values_from = "prop_vote",
id_cols = "riding_id",
values_fill = 0,
names_prefix = "prop_vote_2018")
View(final)
final <- data %>%
mutate(party = partys[as.character(party_id)]) %>%
drop_na(party) %>%
pivot_wider(names_from = "party",
values_from = "prop_vote",
id_cols = "riding_id",
values_fill = 0,
names_prefix = "vote_2018_")
final <- data %>%
mutate(party = partys[as.character(party_id)]) %>%
drop_na(party) %>%
pivot_wider(names_from = "party",
values_from = "prop_vote",
id_cols = "riding_id",
values_fill = 0,
names_prefix = "vote2018_")
census_data <- left_join(census_data, final, by = "riding_id")
View(census_data)
saveRDS(census_data, "mrp/data/census_data.rds")
View(census_data)
