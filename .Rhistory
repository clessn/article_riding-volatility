geom_histogram(fill = "#B4B4B4",
alpha = 1,
binwidth = 0.025) +
theme_publish(base_size = 20) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_line(linewidth = 0.25),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white")
) +
scale_x_continuous(
breaks = c(0.15, 0.85),
labels = c("No volatility observed", "Volatility observed")
) +
scale_y_continuous(breaks = seq(from = 0, to = 20, by = 5),
limits = c(0,20)) +
xlab("Campaign volatility") +
ylab("Number of ridings")
ggsave(
"graphs/figure3_campaignVolatilityDistribution.png",
width = 7,
height = 4.5
)
jo <- c(12,
4,
7,
36,
21,
11,
33,
18,
15,
18,
13,
27,
33,
13,
18,
6,
10)
hub <- (32,
31,
20,
11,
24,
4,
4,
12,
18,
24,
10,
12,
17,
18,
44,
10,
5)
hub <- c(32,
31,
20,
11,
24,
4,
4,
12,
18,
24,
10,
12,
17,
18,
44,
10,
5)
library(ggplot2)
library(dplyr)
d <- data.frame(name = c(rep("jo", 16), rep("hub", 16)),
score = c(jo, hub))
d <- data.frame(name = c(rep("jo", 17), rep("hub", 17)),
score = c(jo, hub))
View(d)
d <- data.frame(name = c(rep("jo", 17), rep("hub", 17)),
score = c(jo, hub)) %>%
group_by(name) %>%
mutate(score_all = cumsum(score))
View(d)
d <- data.frame(name = c(rep("jo", 17), rep("hub", 17)),
score = c(jo, hub)) %>%
group_by(name) %>%
mutate(score_all = cumsum(score))
ggplot(d, aes(x = 1:17, y = score_all))
c(1:17)
ggplot(d, aes(x = c(1:17), y = score_all))
d <- data.frame(tour = c(1:17, 1:17),
name = c(rep("jo", 17), rep("hub", 17)),
score = c(jo, hub)) %>%
group_by(name) %>%
mutate(score_all = cumsum(score))
ggplot(d, aes(x = tour, y = score_all))
ggplot(d, aes(x = tour, y = score_all)) +
geom_line()
ggplot(d, aes(x = tour, y = score_all)) +
geom_line(aes(group = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_line(aes(group = name, color = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, color = name)) +
geom_line(aes(group = name, color = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, color = name, fill = name),
position = position_dodge()) +
geom_line(aes(group = name, color = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, y = score,
color = name, fill = name),
position = position_dodge()) +
geom_line(aes(group = name, color = name))
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, y = score,
color = name, fill = name),
position = position_dodge()) +
geom_line(aes(group = name, color = name),
size = 2)
ggplot(d, aes(x = tour, y = score_all)) +
geom_bar(stat = "identity", aes(group = name, y = score,
color = name, fill = name),
position = position_dodge(),
alpha = 0.7) +
geom_line(aes(group = name, color = name),
size = 2, alpha = 0.8)
# Packages ----------------------------------------------------------------
library(tidyverse) ## for data wrangling and ggplot
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_agregatedData.rds")
View(Data)
names(Data)
str(Data)
ggplot(Data, aes(x = fragility_index, y = volatility))
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("Volatility index\n(before campaign)") +
ylab("Campaign volatility")
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3)
# Graph -------------------------------------------------------------------
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 14.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 55, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 55, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 55, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 55, color = "grey") +
theme_publish() +
theme(text = element_markdown(lineheight = 1),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_text(size = 60, hjust = 0.5),
axis.title.y = element_text(size = 60, hjust = 0.5),
axis.text = element_text(size = 40))
?cor
### Generate pearson correlation between two variables
cor <- cor.test(Data$fragility_index, Data$volatility)$estimate
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 14.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 55, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 55, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 55, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 55, color = "grey") +
theme_publish() +
theme(text = element_markdown(lineheight = 1),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_text(size = 60, hjust = 0.5),
axis.title.y = element_text(size = 60, hjust = 0.5),
axis.text = element_text(size = 40))
library(envalysis) ## for the `theme_publish()` function
library(ggtext) ## for the element_markdown() function (in the graph)
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 14.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 55, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 55, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 55, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 55, color = "grey") +
theme_publish() +
theme(text = element_markdown(lineheight = 1),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_text(size = 60, hjust = 0.5),
axis.title.y = element_text(size = 60, hjust = 0.5),
axis.text = element_text(size = 40))
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 14.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 55, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 55, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 55, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 55, color = "grey") +
theme_publish()
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 14.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 55, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 55, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 55, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 55, color = "grey") +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 60, hjust = 0.5),
axis.title.y = element_markdown(size = 60, hjust = 0.5),
axis.text = element_text(size = 40))
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 14.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 55, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 55, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 55, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 55, color = "grey") +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 60, hjust = 0.5),
axis.title.y = element_markdown(size = 60, hjust = 0.5),
axis.text = element_text(size = 40))
ggsave("graphs/figure4_fragilityVSvolatility",
width = 7, height = 7)
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 35, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 35, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 35, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 35, color = "grey") +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 6),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index\n(before campaign)") +
ylab("<br>Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 25, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 25, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 25, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 25, color = "grey") +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Volatility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 25, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 25, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 25, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 25, color = "grey") +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
ggplot(Data, aes(x = fragility_index, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "grey", alpha = 0.7) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
geom_text(x = 0, y = 1, label = "Q1", size = 25, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 25, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 25, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 25, color = "grey") +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_agregatedData.rds")
## Create dummy variables for each quadrant and each value
##### See paper for more information about the quadrants
#### quadrant_1 = up-right
#### quadrant_2 = down-right
#### quadrant_3 = down-left
#### quadrant_4 = up-left
Data <- Data %>%
mutate(
# If fragility_index is > than 0.5, fragile_yes will
# take a value of 1. If not, it will take a value of 0.
fragile_yes = ifelse(fragility_index >= 0.5, 1, 0),
# Same thing with campaign volatility
volatile_yes = ifelse(volatility >= 0.5, 1, 0),
quadrant_1 = ifelse(volatility_index >= 0.5 &
real_volatility >= 0.5,
1, 0),
quadrant_2 = ifelse(volatility_index >= 0.5 &
real_volatility <= 0.5,
1, 0),
quadrant_3 = ifelse(volatility_index <= 0.5 &
real_volatility <= 0.5,
1, 0),
quadrant_4 = ifelse(volatility_index <= 0.5 &
real_volatility >= 0.5,
1, 0)
)
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_agregatedData.rds")
Data <- Data %>%
mutate(
# If fragility_index is > than 0.5, fragile will
# take a value of 1. If not, it will take a value of 0.
fragile = ifelse(fragility_index >= 0.5, 1, 0),
# Same thing with campaign volatility
volatile = ifelse(volatility >= 0.5, 1, 0))
View(Data)
crosstab(Data$volatile, Data$fragile)
?crosstab
descr::crosstab()
library(descr) ## for the crosstab() function
crosstab(Data$volatile, Data$fragile)
?crosstab
crosstab <- crosstab(Data$volatile, Data$fragile,
expected=T, #Add expected frequency to each cell
prop.chisq = T, #Total contribution of each cell
chisq = T) #Results of the chi-squared test will be printed
crosstab
tab <- crosstab$tab
tab
## Save tab into a variable to use the number of rows and columns later
tab <- crosstab$tab
# degrees of freedom: (n_rows - 1)(n_cols - 1)
dfr <- (nrow(tab)-1)*(ncol(tab)-1)
# Critical value of chi-square, p=.05, df=1
cv05 <- qchisq(.05, dfr, lower.tail=F)
cv05
# Critical value of chi-square, p=.01, df=1
cv01 <- qchisq(.01, dfr, lower.tail=F)
cv01
?qchisq
chisq.test(Data$volatile, Data$fragile)
chisq.test(Data$volatile, Data$fragile)
