geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 1),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(0, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
xlab("<br>Fragility index<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 25, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 25, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 25, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 25, color = "grey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 1),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
xlab("<br>Fragility index with MRP<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 25, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 25, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 25, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 25, color = "grey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 1),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
ggplot(Data, aes(x = fragility_index_mrp, y = volatility)) +
xlab("<br>Fragility index with MRP<br>(before campaign)") +
ylab("<br>Campaign volatility<br>") +
geom_vline(xintercept = 0.5, linewidth = 0.3) +
geom_hline(yintercept = 0.5, linewidth = 0.3) +
geom_text(x = 0, y = 1, label = "Q1", size = 25, color = "grey") +
geom_text(x = 1, y = 1, label = "Q2", size = 25, color = "grey") +
geom_text(x = 0, y = 0, label = "Q3", size = 25, color = "grey") +
geom_text(x = 1, y = 0, label = "Q4", size = 25, color = "grey") +
geom_smooth(method = "lm", se = F,
linewidth = 0.5, linetype = "dashed",
color = "black") +
geom_jitter(size = 4, shape = 21, color = "black",
fill = "#565656",
## control for alpha for number of respondents in riding
aes(alpha = alpha)) +
scale_alpha_continuous(
name = "Number of respondents",
range = c(0, 1),
labels = c(0, 50, 100, 150, 200),
breaks = round(predict(
object = loess_alpha,
newdata = data.frame(n_riding = c(5, 50, 100, 150, 200))
))
) +
scale_y_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
scale_x_continuous(limits = c(-0.12, 1.12),
breaks = c(0, 0.5, 1)) +
geom_text(x = 1.0875, y = 0.43, label = paste0("r = ", round(cor, 2)),
color = "#454545", size = 4.5) +
theme_publish() +
theme(axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.title.x = element_markdown(size = 20, hjust = 0.5, lineheight = 1.6),
axis.title.y = element_markdown(size = 20, hjust = 0.5),
axis.text = element_text(size = 12),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/figure4_fragilityVSvolatility.png",
width = 7, height = 7)
# Packages ----------------------------------------------------------------
library(tidyverse)
# Data -------------------------------------------------------------------
Data <- readRDS("data/table3_aggregatedData.rds")
str(Data)
Data <- Data %>%
mutate(
# If fragility_index_mrp is > than 0.5, fragile will
# take a value of 1. If not, it will take a value of 0.
fragile = ifelse(fragility_index_mrp >= 0.5, 1, 0),
# Same thing with campaign volatility
volatile = ifelse(volatility >= 0.5, 1, 0))
## Quick cross-tabulation to explore the data
descr::crosstab(Data$volatile, Data$fragile)
crosstab <- descr::crosstab(Data$volatile, Data$fragile,
expected=T, #Add expected frequency to each cell
prop.chisq = T, #Total contribution of each cell
chisq = T) #Results of the chi-squared test will be printed
crosstab
crosstab
## Save tab into a variable to use the number of rows and columns later
tab <- crosstab$tab
# degrees of freedom: (n_rows - 1)(n_cols - 1)
dfr <- (nrow(tab)-1)*(ncol(tab)-1) ## 1 degree of freedom
# Critical value of chi-square, p=.05, df=1
cv05 <- qchisq(.05, dfr, lower.tail=F)
cv05
# Critical value of chi-square, p=.01, df=1
cv01 <- qchisq(.01, dfr, lower.tail=F)
cv01
# Critical value of chi-square, p=.1, df=1
cv1 <- qchisq(.1, dfr, lower.tail=F)
cv1
chisq.test(Data$volatile, Data$fragile)
# Packages ----------------------------------------------------------------
library(tidyverse)
# Data --------------------------------------------------------------------
rci <- readRDS("data/table1_respondentsRCI.rds")
Data <- readRDS("mrp/data/real_survey_data.rds") %>%
## selecting SES variables
select(respondent_id, region, male, ageC, lang, educ, income) %>%
left_join(., rci, by = "respondent_id")
post_strat <- readRDS("mrp/data/post_strat_table.rds")
# Data wrangling ----------------------------------------------------------
ModelData <- Data %>%
pivot_longer(., cols = starts_with("rci"),
names_to = "party_rci",
values_to = "vote_solidity",
names_prefix = "rci_") %>%
pivot_longer(., cols = starts_with("voteInt"),
names_to = "party_voteInt",
values_to = "vote_intent",
names_prefix = "voteInt_") %>%
filter(party_rci == party_voteInt)
# Model -------------------------------------------------------------------
model <- glm(vote_intent ~
factor(region)*income +
ageC*educ +
vote_solidity,
data = ModelData,
family = binomial())
summary(model)
# Creating container with post_strat --------------------------------------
post_strat2 <- post_strat[rep(1:nrow(post_strat), times = length(table(ModelData$vote_solidity))),]
post_strat2$vote_solidity <- rep(seq(from = -1, to = 1, by = 0.1), each = nrow(post_strat))
post_strat2$prob_vote <- predict(model, newdata = post_strat2,
type = "response")
hist(post_strat2$prob_vote)
breaks_x <- c(-0.8, -0.5, -0.4, -0.3, -0.2, 0.2, 0.3, 0.4, 0.5, 0.8)
gam <- mgcv::gam(prob_vote ~ s(vote_solidity),
data = post_strat2)
View(post_strat2)
gam <- mgcv::gam(prob_vote ~ s(vote_solidity),
data = post_strat2,
weights = riding_prop)
segments <- data.frame(
vote_solidity = breaks_x) %>%
mutate(
gam = predict(gam, newdata = .)*100,
vote_solidity = vote_solidity*10
)
View(segments)
?geom_smooth
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
scale_x_continuous(breaks = breaks_x*10)
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
scale_x_continuous(breaks = breaks_x*10) +
envalysis::theme_publish()
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
scale_x_continuous(breaks = breaks_x*10) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank())
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
scale_x_continuous(breaks = breaks_x*10)
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank())
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(0,25,50,75,100)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank())
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(0.00000001,25,50,75,99.9999999),
labels = c(0,25,50,75,100)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank())
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank())
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
ylab("Probabibility of having to\nvote for party") +
xlab("RCI of leading party") +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank())
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
ylab("Probabibility of having\nintent to vote for party") +
xlab("RCI of leading party") +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank())
ggsave("graphs/appendix_prob_voteInt.png",
width = 8, height = 6)
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop)) +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
ylab("Probabibility of having\nintent to vote for party") +
xlab("RCI of leading party") +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_prob_voteInt.png",
width = 8, height = 5)
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop),
color = "black") +
geom_vline(xintercept = 0, linewidth = 1) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
ylab("Probabibility of having\nintent to vote for party") +
xlab("RCI of leading party") +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_prob_voteInt.png",
width = 8, height = 5)
ggplot(post_strat2, aes(x = vote_solidity*10, y = prob_vote*100)) +
#geom_jitter(alpha = 0.1) +
geom_smooth(method = "gam",
aes(weight = riding_prop),
color = "black") +
geom_vline(xintercept = 0, linewidth = 0.4) +
geom_segment(data = segments,
aes(x = vote_solidity,
xend = vote_solidity,
yend = gam),
y = 0,
color = "black",
linetype = "dashed",
alpha = 1,
linewidth = 0.75) +
ylab("Probabibility of having\nintent to vote for party") +
xlab("RCI of leading party") +
scale_x_continuous(breaks = breaks_x*10) +
scale_y_continuous(expand = c(0,0),
breaks = c(1,25,50,75,99),
labels = c(0,25,50,75,100)) +
envalysis::theme_publish() +
theme(axis.ticks = element_blank(),
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white"))
ggsave("graphs/appendix_prob_voteInt.png",
width = 8, height = 5)
