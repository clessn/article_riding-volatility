Strat <- left_join(AllCombs, Strat) %>%
replace(is.na(.), 0) %>%
group_by(educ, income) %>%
mutate(prct2 = sum(prct))
sum(Strat$prct2)
Strat$adjustCoef <- censusPropsIncome/Strat$prct2
View(Strat)
censusPropsIncome <- c("incomeLow" = Census$income40m[i],
"incomeMid" = Census$income40m99[i],
"incomeHigh" = Census$income100p[i])
censusPropsIncome[Strat$income]
Strat$adjustCoef <- censusPropsIncome[Strat$income]/Strat$prct2
Strat$adjustCoef <-
ifelse(Strat$adjustCoef %in% c(-Inf, Inf), 0, Strat$adjustCoef)
Strat$newFreq <- Strat$n * Strat$adjustCoef
Strat <- Strat %>%
select(all_of(vars), newFreq) %>%
rename(n = newFreq) %>%
group_by(ageC, educ) %>%
mutate(prct = (n / sum(n)))
sum(Strat$prct)
LastStagej <- LastStage %>%
select(-n) %>%
rename(prct_ls = prct)
Strat2 <- left_join(Strat, LastStagej) %>%
mutate(prct = prct * prct_ls)
sum(Strat2$prct)
i <- 1
riding_idi <- Census$riding_id[i]
prop_age15p <- 1 - Census$age0m14[i]
censusPropsAge <- c(Census$age15m29[i], Census$age30m44[i],
Census$age45m59[i], Census$age60m74[i],
Census$age75p[i])/prop_age15p
censusPropsEduc <- c(Census$educHSB[i],
Census$educColl[i],
Census$educUniv[i])
censusPropsIncome <- c("incomeLow" = Census$income40m[i],
"incomeMid" = Census$income40m99[i],
"incomeHigh" = Census$income100p[i])
FirstStrat <- Data %>%
select(ageC, educ) %>%
na.omit() %>%
group_by(ageC, educ) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prct = n / sum(n)) %>%
group_by(educ) %>%
mutate(prct = sum(prct))
FirstStrat$adjustCoef <- censusPropsEduc/FirstStrat$prct
FirstStrat$newFreq <- round(FirstStrat$n*FirstStrat$adjustCoef)
FirstStrat <- FirstStrat %>%
ungroup() %>%
select(ageC,educ,newFreq) %>%
rename(n=newFreq) %>%
mutate(prct=n / sum(n))
LastStage <- FirstStrat
Strat <- Data %>%
select(ageC, educ, income) %>%
na.omit() %>%
group_by(ageC, educ, income) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prct = n / sum(n))
vars <- c("ageC", "educ", "income")
args <- paste0("unique(Strat$", vars, ")", collapse = ", ")
AllCombs <-
eval(parse(text = paste0("expand.grid(", args, ")")))
names(AllCombs) <- vars
Strat <- left_join(AllCombs, Strat) %>%
replace(is.na(.), 0) %>%
group_by(educ, income) %>%
mutate(prct2 = sum(prct))
Strat$adjustCoef <- censusPropsIncome[Strat$income]/Strat$prct2
Strat$adjustCoef <-
ifelse(Strat$adjustCoef %in% c(-Inf, Inf), 0, Strat$adjustCoef)
Strat$newFreq <- Strat$n * Strat$adjustCoef
Strat <- Strat %>%
select(all_of(vars), newFreq) %>%
rename(n = newFreq) %>%
group_by(ageC, educ) %>%
mutate(prct = (n / sum(n)))
LastStagej <- LastStage %>%
select(-n) %>%
rename(prct_ls = prct)
Strat2 <- left_join(Strat, LastStagej) %>%
mutate(prct = prct * prct_ls)
sum(Strat2$prct)
LastStage <- Strat2 %>%
select(-prct_ls)
if (i == 1) {
StratTable <- LastStage %>%
mutate(riding_id = riding_idi)
}
else {
TempStrat <- LastStage %>%
mutate(riding_id = riding_idi)
StratTable <- rbind(StratTable, TempStrat)
}
print(paste0(round(i / nrow(Census) * 100), "% - ", riding_idi))
sum(Strat$prct)
sum(Strat2$prct)
for (i in 1:nrow(Census)) {
options(dplyr.summarise.inform = FALSE)
options(dplyr.left_join.inform = FALSE)
riding_idi <- Census$riding_id[i]
prop_age15p <- 1 - Census$age0m14[i]
censusPropsAge <- c(Census$age15m29[i], Census$age30m44[i],
Census$age45m59[i], Census$age60m74[i],
Census$age75p[i])/prop_age15p
censusPropsEduc <- c(Census$educHSB[i],
Census$educColl[i],
Census$educUniv[i])
censusPropsIncome <- c("incomeLow" = Census$income40m[i],
"incomeMid" = Census$income40m99[i],
"incomeHigh" = Census$income100p[i])
FirstStrat <- Data %>%
select(ageC, educ) %>%
na.omit() %>%
group_by(ageC, educ) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prct = n / sum(n)) %>%
group_by(educ) %>%
mutate(prct = sum(prct))
FirstStrat$adjustCoef <- censusPropsEduc/FirstStrat$prct
FirstStrat$newFreq <- round(FirstStrat$n*FirstStrat$adjustCoef)
FirstStrat <- FirstStrat %>%
ungroup() %>%
select(ageC,educ,newFreq) %>%
rename(n=newFreq) %>%
mutate(prct=n / sum(n))
LastStage <- FirstStrat
Strat <- Data %>%
select(ageC, educ, income) %>%
na.omit() %>%
group_by(ageC, educ, income) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(prct = n / sum(n))
vars <- c("ageC", "educ", "income")
args <- paste0("unique(Strat$", vars, ")", collapse = ", ")
AllCombs <-
eval(parse(text = paste0("expand.grid(", args, ")")))
names(AllCombs) <- vars
Strat <- left_join(AllCombs, Strat) %>%
replace(is.na(.), 0) %>%
group_by(educ, income) %>%
mutate(prct2 = sum(prct))
Strat$adjustCoef <- censusPropsIncome[Strat$income]/Strat$prct2
Strat$adjustCoef <-
ifelse(Strat$adjustCoef %in% c(-Inf, Inf), 0, Strat$adjustCoef)
Strat$newFreq <- Strat$n * Strat$adjustCoef
Strat <- Strat %>%
select(all_of(vars), newFreq) %>%
rename(n = newFreq) %>%
group_by(ageC, educ) %>%
mutate(prct = (n / sum(n)))
LastStagej <- LastStage %>%
select(-n) %>%
rename(prct_ls = prct)
Strat2 <- left_join(Strat, LastStagej) %>%
mutate(prct = prct * prct_ls)
LastStage <- Strat2 %>%
select(-prct_ls)
if (i == 1) {
StratTable <- LastStage %>%
mutate(riding_id = riding_idi)
}
else {
TempStrat <- LastStage %>%
mutate(riding_id = riding_idi)
StratTable <- rbind(StratTable, TempStrat)
}
print(paste0(round(i / nrow(Census) * 100), "% - ", riding_idi))
}
StratTable$n[is.nan(StratTable$n)] <- 0
StratTable$prct[is.nan(StratTable$prct)] <- 0
# Test
StratTable %>%
group_by(riding_id) %>%
summarise(sum = sum(prct))
# Test
StratTable %>%
group_by(riding_id) %>%
summarise(sum = sum(prct)) %>%
arrange(-sum)
## Save it
saveRDS(StratTable, "mrp/data/post_strat_table.rds")
View(StratTable)
dummy_variables <- function(original_data, model){
classes <- attr(model$terms, "dataClasses")
vars_to_dummy <- names(classes[classes=="factor"])
d <- original_data %>%
dummy_cols(.,
select_columns = vars_to_dummy)
names(d)[(ncol(original_data)+1):ncol(d)] <- gsub("_", "",
names(d)[(ncol(original_data)+1):ncol(d)])
return(d)
}
find_interactions <- function(vis){
interactions <- vis[grepl(":", vis)]
output <- strsplit(interactions, ":")
return(output)
}
predictor <- function(variable, coefs, newdata){
coef <- coefs[variable]
vec <- coef*newdata[[variable]]
return(vec)
}
apply_tresholds <- function(lin_pred, tresholds){
if (lin_pred < tresholds[1]){
return(0)
} else {
wo_higher <- tresholds[tresholds <= lin_pred]
treshold <- names(wo_higher)[length(wo_higher)]
value <- as.numeric(strsplit(treshold, split = "|", fixed = T)[[1]][2])
return(value)
}
}
predict_continuous <- function(model, newdata, sign_treshold){
#model <- modelCAQ
#newdata <- postStrat_weighted
#sign_treshold <- 0.1
## 1 transform newdata to dummy variables that need to be dummied
newdata <- dummy_variables(newdata, model)
## 2 Keep significative terms with their coefficient
pvalues <- summary(model)$coefficients[,4]
s_pvalues <- pvalues[pvalues <= sign_treshold]
tresholds <- model$alpha
s_pvalues <- s_pvalues[-c(1:length(tresholds))] ## remove tresholds
s_coefs <- coef(model)[names(s_pvalues)]
## 3 Create interaction variables
interactions <- find_interactions(names(s_coefs))
if (length(interactions) > 0){
for (i in 1:length(interactions)){
interactioni <- interactions[[i]]
col_name <- paste0(interactioni[1], ":", interactioni[2])
newdata[[col_name]] <- newdata[[interactioni[1]]] + newdata[[interactioni[2]]]
newdata[[col_name]] <- ifelse(newdata[[col_name]] == 2, 1, 0)
}
}
## 4 Generate linear prediction for each fixed effects
pred_data <- data.frame(id = 1:nrow(newdata))
for (i in 1:length(s_coefs)){
#i <- 1
variable <- names(s_coefs)[i]
pred_data[[variable]] <- predictor(variable,
s_coefs,
newdata)
}
## 5 Add riding effect
riding_effects_df <- ranef(model)$riding_test
riding_effects <- riding_effects_df$`(Intercept)`
names(riding_effects) <- rownames(riding_effects_df)
pred_data$riding_test <- riding_effects[as.character(newdata$riding_test)]
#### remove id column
pred_data <- pred_data %>%
select(-id)
## 6 Generate linear predictions
linear_preds <- rowSums(pred_data)
return(linear_preds)
}
# Packages ----------------------------------------------------------------
library(tidyverse)
library(ordinal)
library(fastDummies)
source("mrp/functions.R")
# Data --------------------------------------------------------------------
Data <- readRDS("mrp/data/real_survey_data.rds")
hist(Data$vote_solidity)
table(Data$vote_solidity)
1:10/10
0:10/10
Data$vote_solidity <- factor(Data$vote_solidity,
levels = 0:10/10)
table(Data$vote_solidity)
unique(Data$vote_solidity)
View(Data)
model <- ordinal::clmm(
formula = vote_solidity ~ ageC*educ + income*factor(region) + (1 | region),
data = Data
)
summary(model)
model <- ordinal::clmm(formula = vote_solidity ~
ageC + educ +
income +
(1 | region),
data = Data)
summary(model)
model <- ordinal::clmm(formula = vote_solidity ~
ageC*educ*income +
(1 | region),
data = Data)
summary(model)
model <- MASS::polr(formula = vote_solidity ~
ageC * educ * income * region,
data = Data)
model <- MASS::polr(formula = vote_solidity ~
ageC * educ + income * region,
data = Data)
summary(model)
model <- ordinal::clmm(formula = vote_solidity ~
ageC*educ*income +
(1 | region),
data = Data)
summary(model)
## Save model
saveRDS(model, "mrp/models/model.rds")
## random effects by region
ranef(model)$region
model <- MASS::polr(formula = vote_solidity ~
ageC * educ * income * factor(region),
data = Data)
model <- MASS::polr(formula = vote_solidity ~
ageC * educ + income * factor(region),
data = Data)
## summary of model
summary(model)
# Packages ----------------------------------------------------------------
library(tidyverse)
source("mrp/functions.R", encoding = "UTF-8")
# Model -------------------------------------------------------------------
model <- readRDS("mrp/models/model.rds")
# Data --------------------------------------------------------------------
post_strat <- readRDS("mrp/data/post_strat_table.rds")
predict_clm(model, newdata = post_strat, sign_treshold = 0.05)
predict_continuous(model, newdata = post_strat, sign_treshold = 0.05)
View(post_strat)
View(post_strat)
census <- readRDS("mrp/data/census_data.rds")
regions <- census$region
names(regions) <- census$riding_id
post_strat$region <- regions[as.character(post_strat$riding_id)]
post_strat$pred <- predict_clm(model, newdata = post_strat, sign_treshold = 0.05)
predict_clm <- function(model, newdata, sign_treshold){
## 1 Get continuous linear prediction from clm model
linear_preds <- predict_continuous(model, newdata, sign_treshold)
tresholds <- model$alpha
## 2 Apply tresholds
results <- sapply(linear_preds,
apply_tresholds,
tresholds)
return(results)
}
post_strat$pred <- predict_clm(model, newdata = post_strat, sign_treshold = 0.05)
View(post_strat)
hist(post_strat$pred)
## Save model
saveRDS(model, "mrp/models/model_ordinal.rds")
# Data --------------------------------------------------------------------
Data <- readRDS("mrp/data/real_survey_data.rds")
# Exploration -------------------------------------------------------------
hist(Data$vote_solidity)
## Linear model ------------------------------------------------------------
model <- lmerTest::lmer(formula = vote_solidity ~
ageC * educ + income * region +
(1 | region),
data = Data)
summary(model)
summary(model)
## Linear model ------------------------------------------------------------
model <- lmerTest::lmer(formula = vote_solidity ~
ageC * educ + income * factor(region) +
(1 | region),
data = Data)
summary(model)
## random effects by region
ranef(model)$region
## Save model
saveRDS(model, "mrp/models/model_linear.rds")
# Model -------------------------------------------------------------------
model <- readRDS("mrp/models/model_linear.rds")
# Data --------------------------------------------------------------------
post_strat <- readRDS("mrp/data/post_strat_table.rds")
census <- readRDS("mrp/data/census_data.rds") ## for region of riding
regions <- census$region
names(regions) <- census$riding_id
post_strat$region <- regions[as.character(post_strat$riding_id)]
post_strat$pred <- predict(model, newdata = post_strat)
View(post_strat)
hist(post_strat$pred)
# Data --------------------------------------------------------------------
Data <- readRDS("mrp/data/real_survey_data.rds")
# Exploration -------------------------------------------------------------
hist(Data$vote_solidity)
Data$vote_solidity_factor <- factor(Data$vote_solidity,
levels = 0:10 / 10)
table(Data$vote_solidity_factor)
unique(Data$vote_solidity_factor)
## Ordinal model 2: without random effects -----------------------------------------------------------
model <- MASS::polr(formula = vote_solidity_factor ~
ageC * educ + income * factor(region),
data = Data)
## summary of model
summary(model)
## random effects by region
ranef(model)$region
## Save model
saveRDS(model, "mrp/models/model_ordinal2.rds")
# Packages and functions ----------------------------------------------------------------
library(tidyverse)
source("mrp/functions.R", encoding = "UTF-8")
# Model -------------------------------------------------------------------
model <- readRDS("mrp/models/model_ordinal2.rds")
post_strat <- readRDS("mrp/data/post_strat_table.rds")
census <- readRDS("mrp/data/census_data.rds") ## for region of riding
regions <- census$region
names(regions) <- census$riding_id
post_strat$region <- regions[as.character(post_strat$riding_id)]
post_strat$pred <- predict(model, newdata = post_strat)
View(post_strat)
hist(post_strat$pred)
post_strat$pred2 <- as.numeric(post_strat$pred)
hist(post_strat$pred2)
table(post_strat$pred2)
## Decision tree ---------------------------------------------------------
model <- rpart::rpart(formula = vote_solidity_factor ~
ageC + educ + income + factor(region))
# Data --------------------------------------------------------------------
Data <- readRDS("mrp/data/real_survey_data.rds")
Data$vote_solidity_factor <- factor(Data$vote_solidity,
levels = 0:10 / 10)
## Decision tree ---------------------------------------------------------
model <- rpart::rpart(formula = vote_solidity_factor ~
ageC + educ + income + factor(region))
## Decision tree ---------------------------------------------------------
model <- rpart::rpart(formula = vote_solidity_factor ~
ageC + educ + income + factor(region),
data = Data)
rpart.plot::rpart.plot(model)
## Save model
saveRDS(model, "mrp/models/decision_tree.rds")
# Model -------------------------------------------------------------------
model <- readRDS("mrp/models/decision_tree.rds")
post_strat <- readRDS("mrp/data/post_strat_table.rds")
census <- readRDS("mrp/data/census_data.rds") ## for region of riding
regions <- census$region
names(regions) <- census$riding_id
post_strat$region <- regions[as.character(post_strat$riding_id)]
post_strat$pred <- predict(model, newdata = post_strat)
hist(post_strat$pred)
table(post_strat$pred)
## Ordinal model 3: without interactions -----------------------------------------------------------
model <- MASS::polr(formula = vote_solidity_factor ~
ageC + educ + income + factor(region),
data = Data)
## summary of model
summary(model)
## Save model
saveRDS(model, "mrp/models/model_ordinal3.rds")
# Model -------------------------------------------------------------------
model <- readRDS("mrp/models/model_ordinal3.rds")
post_strat <- readRDS("mrp/data/post_strat_table.rds")
census <- readRDS("mrp/data/census_data.rds") ## for region of riding
regions <- census$region
names(regions) <- census$riding_id
post_strat$region <- regions[as.character(post_strat$riding_id)]
post_strat$pred <- predict(model, newdata = post_strat)
hist(post_strat$pred)
table(post_strat$pred)
## Ordinal model 3: without interactions -----------------------------------------------------------
model <- MASS::polr(formula = vote_solidity_factor ~
ageC + educ + income + factor(region),
data = Data, Hess = T)
## summary of model
summary(model)
post_strat$pred <- predict(model, newdata = post_strat)
table(post_strat$pred)
## Ordinal model 3: without interactions -----------------------------------------------------------
model <- MASS::polr(formula = vote_solidity_factor ~
ageC + educ + income + factor(region),
data = Data, Hess = F)
post_strat$pred <- predict(model, newdata = post_strat)
table(post_strat$pred)
?polr
Data %>% filter(ageC=="age15m29"&educ=="educHSB"&income=="incomeLow"&region=="estrie")
hist(Data %>% filter(ageC=="age15m29"&educ=="educHSB"&income=="incomeLow"&region=="estrie") %>% pull(., vote_solidity))
hist(Data %>% filter(ageC=="age60m74"&educ=="educHSB"&income=="incomeLow"&region=="estrie") %>% pull(., vote_solidity))
hist(Data %>% filter(ageC=="age60m74"&educ=="educHSB"&income=="incomeLow"&region=="south_shore") %>% pull(., vote_solidity))
# Exploration -------------------------------------------------------------
hist(Data$vote_solidity)
### for a glm binomial model
Data$fragile <- ifelse(Data$vote_solidity<=0.3, 1, 0)
table(Data$fragile)
model <- glm(
formula = vote_solidity_factor ~
ageC * educ + income * region,
data = Data,
family = binomial()
)
## summary of model
summary(model)
View(Data)
## Save model
saveRDS(model, "mrp/models/model_glm.rds")
# Model -------------------------------------------------------------------
model <- readRDS("mrp/models/model_glm.rds")
post_strat <- readRDS("mrp/data/post_strat_table.rds")
census <- readRDS("mrp/data/census_data.rds") ## for region of riding
regions <- census$region
names(regions) <- census$riding_id
post_strat$region <- regions[as.character(post_strat$riding_id)]
post_strat$pred <- predict(model, newdata = post_strat, type = "response")
hist(post_strat$pred)
table(post_strat$pred)
hist(post_strat$pred)
Data$pred <- predict(model, newdata = post_strat, type = "response")
Data$pred <- predict(model, newdata = post_strat, type = "response")
Data$pred <- predict(model, newdata = Data, type = "response")
rlang::last_trace()
Data %>% ggplot(aes(x = pred)) +
geom_histogram() + facet_wrap(~fragile)
